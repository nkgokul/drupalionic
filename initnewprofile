#!/bin/bash

################################################################################
#
# This script will setup a local copy of Drupal 7
# based on the Installation Profile.
#
# Do not change the content of this file,
# all configuration variables are in the config.sh file.
#
################################################################################


# Define the root of the GIT repository.
cd ${0%/*}
ROOT=$(pwd)
cd $ROOT

# Load the colors.
source $ROOT/scripts/helper-colors.sh

# Load the helpers.
source $ROOT/scripts/helper-functions.sh


# Check if there is a drupalionic folder.
if [ ! -d $ROOT/drupalionic ]; then
  echo
  echo -e  "${BGRED}                                                                 ${RESTORE}"
  echo -e "${BGLRED}  Skelleton profile not found!                                   ${RESTORE}"
  echo -e  "${BGRED}  This script works only if you have the drupalionic profile        ${RESTORE}"
  echo -e  "${BGRED}  folder.                                                        ${RESTORE}"
  echo -e  "${BGRED}  Start with a fresh copy of the drupal7-drupalionic project.       ${RESTORE}"
  echo -e  "${BGRED}  See https://github.com/zero2one/drupal7-drupalionic               ${RESTORE}"
  echo -e  "${BGRED}                                                                 ${RESTORE}"
  echo
  exit 1
fi


# Ask confirmation before renaming the files & references to drupalionic!
echo
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo -e "${BGLBLUE}  Rename drupalionic profile to your own project.                   ${RESTORE}"
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo -e  "${BGBLUE}  > This will rename the profile to the name you want.           ${RESTORE}"
echo -e  "${BGBLUE}  > This will update all scrips so they support the new name.    ${RESTORE}"
echo -e  "${BGBLUE}  > This script will be deleted as it has no longer use.         ${RESTORE}"
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo

echo -e -n "${LRED}Are you sure?${RESTORE} (Y/n) "
read -e -n 1 -r
if [[ ! $REPLY =~ ^[Y]$ ]]; then
  echo
  echo -e  "${BGYELLOW}                                                                 ${RESTORE}"
  echo -e "${BGLYELLOW}  Installation aborted!                                          ${RESTORE}"
  echo -e  "${BGYELLOW}                                                                 ${RESTORE}"
  echo
  exit 0
fi
echo


# Ask for the profile details.
function input_profile_name {
  echo -e -n "${LWHITE}Machine name of the new profile: ${RESTORE}"
  read NEW_PROFILE_NAME
}
function input_profile_title {
  echo -e -n "${LWHITE}Human name of the new profile: ${RESTORE}"
  read NEW_PROFILE_TITLE
}
function input_github_url {
  echo -e -n "${LWHITE}GitHub URL for this profile${RESTORE} (leave empty if none): "
  read NEW_GITHUB_URL
}
function input_profile_collect {
  input_profile_name
  while [[ ! "$NEW_PROFILE_NAME" =~ ^[a-z0-9_]{2,100}$ ]]; do
    echo -e "${RED}Machine name name not valid:${RESTORE}"
    echo -e "${RED}  - it should contain lowercase alphanumerique characters${RESTORE}"
    echo -e "${RED}  - underscore is allowed${RESTORE}"
    echo -e "${RED}and should be at least 2 characters long.${RESTORE}"
    input_profile_name
  done
  echo

  input_profile_title
  while [[ ! "$NEW_PROFILE_TITLE" =~ ^.{2,100}$ ]]; do
    echo -e "${RED}Human name name not valid:${RESTORE}"
    echo -e "${RED}it should be at least 2 characters long.${RESTORE}"
    input_profile_title
  done
  echo

  input_github_url
  while [[ "$NEW_GITHUB_URL" ]] && [[ ! "$NEW_GITHUB_URL" =~ ^https://github\.com/ ]]; do
    echo -e "${RED}GitHub URL is not valid:${RESTORE}"
    echo -e "${RED}it should start with https://github.com/${RESTORE}"
    input_github_url
  done
  echo
}
input_profile_collect


# Ask confirmation!
INFO_PROFILE_NAME=$(fill_string_spaces "• Machine name : ${BGLBLUE}$NEW_PROFILE_NAME" 75)
INFO_PROFILE_TITLE=$(fill_string_spaces "• Human name : ${BGLBLUE}$NEW_PROFILE_TITLE" 75)
echo
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo -e "${BGLBLUE}  drupalionic module will be renamed to:                            ${RESTORE}"
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo -e  "${BGBLUE}  $INFO_PROFILE_NAME  ${RESTORE}"
echo -e  "${BGBLUE}  $INFO_PROFILE_TITLE  ${RESTORE}"
if [[ "$NEW_GITHUB_URL" ]]; then
  INFO_GITHUB_URL=$(fill_string_spaces "• GitHub URL : ${BGLBLUE}$NEW_GITHUB_URL" 75)
  echo -e  "${BGBLUE}  $INFO_GITHUB_URL  ${RESTORE}"
else
  echo -e  "${BGBLUE}  • No GitHub URL                                                ${RESTORE}"
fi
echo -e  "${BGBLUE}                                                                 ${RESTORE}"
echo
echo -e -n "${LRED}Are you sure?${RESTORE} (Y/n) "
read -e -n 1 -r
if [[ ! $REPLY =~ ^[Y]$ ]]; then
  echo
  echo -e  "${BGYELLOW}                                                                 ${RESTORE}"
  echo -e "${BGLYELLOW}  Installation aborted!                                          ${RESTORE}"
  echo -e  "${BGYELLOW}                                                                 ${RESTORE}"
  echo
  exit 0
fi
echo


##
# Make whole string uppercase.
#
# @param string
##
function string_uppercase {
  echo $1 | tr 'a-z' 'A-Z'
}

##
# Make first letter uppercase.
#
# @param string
##
function string_camelcase {
  # First, get the first character.
  firstchar=${1:0:1}
  # Rest of the string.
  restchars=${1:1}

  # Make first uppercase.
  firstchar=$(string_uppercase $firstchar)
  echo "$firstchar$restchars"
}

##
# Process files and replace drupalionic by $NEW_PROFILE_NAME
#
# This will replace:
# - drupalionic by $NEW_PROFILE_NAME
# - drupalionic by the camelcased $NEW_PROFILE_NAME string.
# - drupalionic by the uppercased $NEW_PROFILE_NAME string.
#
# If a second parameter (new filename) is given, the file will be renamed to it.
#
# @param string
#   file
# @param string
#   (optional) new file name
##
function process_drupalionic_file {
  FILENAME_SOURCE="$1"
  FILENAME_TARGET="$2"
  NEW_PROFILE_NAME_UPPERCASE=$(string_uppercase $NEW_PROFILE_NAME)
  NEW_PROFILE_NAME_CAMELCASE=$(string_camelcase $NEW_PROFILE_NAME)
  NEW_PROFILE_GITHUB_URL="${NEW_GITHUB_URL/https:\/\/github.com\//}"
  NEW_PROFILE_GITHUB_URL=$(echo $NEW_PROFILE_GITHUB_URL | sed -e 's/\//\\\//g')

  echo "  - Process $FILENAME_SOURCE"

  if [ ! -f $FILENAME_SOURCE ]; then
    echo -e "    ${YELLOW}[WARNING] File not found : $FILENAME_SOURCE${RESTORE}"
    return 1
  fi
  sed -i '' -e "s/zero2one\/drupal7-drupalionic/$NEW_PROFILE_GITHUB_URL/g" $1
  sed -i '' -e "s/drupalionic_Title/$NEW_PROFILE_TITLE/g" $1
  sed -i '' -e "s/drupalionic/$NEW_PROFILE_NAME/g" $1
  sed -i '' -e "s/drupalionic/$NEW_PROFILE_NAME_UPPERCASE/g" $1
  sed -i '' -e "s/drupalionic/$NEW_PROFILE_NAME_CAMELCASE/g" $1

  if [ "$FILENAME_TARGET" ]; then
    mv "$FILENAME_SOURCE" "$FILENAME_TARGET"
    echo -e "    ${LBLACK}Renamed file to $FILENAME_TARGET${RESTORE}"
  fi
}


##
# Rename (move) a folder
#
# @param string
#   Directory name
# @param string
#   New directory name
##
function process_drupalionic_directory {
  DIRECTORY_SOURCE="$1"
  DIRECTORY_TARGET="$2"

  echo "  - Process directory $DIRECTORY_SOURCE"

  if [ ! -d $DIRECTORY_SOURCE ]; then
    echo -e "    ${YELLOW}[WARNING] Directory not found : $DIRECTORY_SOURCE${RESTORE}"
    return 1
  fi

  if [ "$DIRECTORY_TARGET" ]; then
    mv "$DIRECTORY_SOURCE" "$DIRECTORY_TARGET"
    echo -e "    ${LBLACK}Renamed directory to $DIRECTORY_TARGET${RESTORE}"
  fi
}


# Process all files & directories
echo
echo -e "${BLUE}> Replace ${LBLUE}drupalionic${BLUE} by ${LBLUE}$NEW_PROFILE_NAME${BLUE} in files & filenames...${RESTORE}"

# Demo module
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/csv/node/drupalionic_content.csv" \
  "drupalionic/modules/drupalionic/drupalionic_demo/csv/node/${NEW_PROFILE_NAME}_content.csv"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/includes/CreateEntity.inc"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/includes/CreateContent.inc"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/drupalionic_demo.info" \
  "drupalionic/modules/drupalionic/drupalionic_demo/${NEW_PROFILE_NAME}_demo.info"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/drupalionic_demo.install" \
  "drupalionic/modules/drupalionic/drupalionic_demo/${NEW_PROFILE_NAME}_demo.install"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/drupalionic_demo.module" \
  "drupalionic/modules/drupalionic/drupalionic_demo/${NEW_PROFILE_NAME}_demo.module"
process_drupalionic_file \
  "drupalionic/modules/drupalionic/drupalionic_demo/drupalionic_demo.test" \
  "drupalionic/modules/drupalionic/drupalionic_demo/${NEW_PROFILE_NAME}_demo.test"

# Demo profile
process_drupalionic_file \
  "drupalionic/drupalionic.info" \
  "drupalionic/${NEW_PROFILE_NAME}.info"
process_drupalionic_file \
  "drupalionic/drupalionic.install" \
  "drupalionic/${NEW_PROFILE_NAME}.install"
process_drupalionic_file \
  "drupalionic/drupalionic.profile" \
  "drupalionic/${NEW_PROFILE_NAME}.profile"

# Behat
process_drupalionic_file \
  "drupalionic/behat/aliases.drushrc.php"
process_drupalionic_file \
  "drupalionic/behat/behat.local.yml.example"
# !TODO: SPECIAL case, we need to paste the actual github path!
process_drupalionic_file \
  "drupalionic/behat/behat.local.yml.travis"
process_drupalionic_file \
  "drupalionic/behat/behat.yml"

# .gitignore
process_drupalionic_file \
  ".gitignore"

# Travis-Ci
process_drupalionic_file \
  ".travis.yml"

# default.config
process_drupalionic_file \
  "default.config.sh"

# README
process_drupalionic_file \
  "README.md"



# Rename folders.
echo
echo -e "${BLUE}> Change ${LBLUE}drupalionic${BLUE} folder name to ${LBLUE}$NEW_PROFILE_NAME${BLUE}...${RESTORE}"

# Demo module
process_drupalionic_directory \
  "drupalionic/modules/drupalionic/drupalionic_demo" \
  "drupalionic/modules/drupalionic/${NEW_PROFILE_NAME}_demo"
process_drupalionic_directory \
  "drupalionic/modules/drupalionic" \
  "drupalionic/modules/${NEW_PROFILE_NAME}"

# drupalionic profile
process_drupalionic_directory \
  "drupalionic" \
  "${NEW_PROFILE_NAME}"


# End message.
# If we managed to get to here: the installation was successful!
TITLE=$(fill_string_spaces "${BGLGREEN}$NEW_PROFILE_NAME${BGGREEN} created" 89)
echo
echo -e  "${BGGREEN}                                                                 ${RESTORE}"
echo -e "${BGLGREEN}  $TITLE  ${RESTORE}"
echo -e  "${BGGREEN}  New profile has been created based on the drupalionic profile.    ${RESTORE}"
echo -e  "${BGGREEN}                                                                 ${RESTORE}"
echo


# Destroy this script
rm ./initnewprofile

# DONE !
exit
